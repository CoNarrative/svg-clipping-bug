// Copyright (c) 2014 CoNarrative - http://www.conarrative.com/
_.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g
}, function() {
    var e = glu.model;
    glu.model = function(t, i) {
        if (glu.isObject(t) && (i = t, t = null), null == i && (i = {}), i.mtype = i.mtype || t || "viewmodel", 
        i.mtype && i.mtype.indexOf(".") > -1) {
            var n = glu._splitReference(i.mtype);
            i.ns = n.ns, i.mtype = n.name;
        }
        if (i.ns) {
            var s = glu.walk(i.ns)[i.mtype];
            if (s && glu.isFunction(s)) return delete i.mtype, new s(i);
        }
        return e.call(this, t, i);
    };
    var t = _.template("this.on('{{path}}', function(){this.recalculateFormula('{{formulaName}}');});"), i = _.template("this.on('{{path}}', function(){this.{{key}}.action.call(this);});"), n = _.template("this.{{key}} = {{value}};"), s = _.template("this.set('{{key}}', config.{{key}} || this.model(new this._childModels.{{key}}()));"), r = glu.defModel;
    glu.defModel = function(e, t) {
        var i = e.toLowerCase();
        return -1 == i.indexOf("mixin") ? glu.defModelLight(e, t) : r.call(this, e, t);
    }, glu.defModelLight = function(e, r) {
        function o(e) {
            var t = "set" + glu.symbol(e).toPascalCase();
            c[t] = r[t] || function(t) {
                this.setRaw(e, t);
            };
        }
        r = glu.deepApply({}, r);
        var a = this._splitReference(e, r), l = a.ns, h = glu.ns(a.ns), d = l ? glu.ns(l + "." + glu.conventions.viewmodelNs) : {}, c = {
            ns: a.ns,
            mtype: "viewmodel",
            viewmodelName: a.name,
            _formulasInOrder: [],
            _formulas: {},
            _mixinInitializers: [],
            _setters: {},
            _childModels: {}
        }, u = [], f = [], m = [];
        r.init && (c.initCustom = r.init, delete r.init), r.mixins && (_.each(r.mixins, function(e) {
            var t = d[e] || glu.mtypeRegistry[e];
            if (!t) throw new Error('Could not find mixin named "' + e + '"');
            glu.deepApplyIf(r, t), t.initMixin && (c._mixinInitializers.push(t.initMixin), delete r.initMixin);
        }), delete r.mixins), _.each(r, function(e, r) {
            function a(e) {
                for (;y = e.exec(d); ) {
                    var t = y[1];
                    if ("get" !== t && "localize" !== t && 0 != d.substring(y.index + y[0].length).trim().indexOf("(")) for (var i = t.split("."), n = "", s = 0; s < i.length; s++) v[n + i[s] + "Changed"] = !0, 
                    w[n + i[s]] = !0, n = n + i[s] + ".";
                }
            }
            var l = glu.isObject(e);
            if (glu.isFunction(e)) if (r.indexOf("$") === r.length - 1) {
                c[r] = e;
                var h = r.substring(0, r.length - 1), d = e.toString(), g = /this\.([\.\w]*)/g, p = /this\.get\s*\(\s*[\'\"]([\w\.]*)/g, v = {}, w = {}, y;
                a(g), a(p);
                for (var x in v) m.push(t({
                    path: x,
                    formulaName: h
                }));
                c._formulas[h] = {
                    fn: e,
                    dependentOn: _.keys(w),
                    inbound: [],
                    outbound: []
                }, o(h);
            } else c[r] = e; else {
                if (l && e._private) throw new Error("Cannot include a child view model in a model definition.");
                if (l && e.hasOwnProperty("on") && (e.hasOwnProperty("action") || e.hasOwnProperty("formula"))) {
                    c[r] = e;
                    var b = glu.isArray(e.on) ? e.on : [ e.on ];
                    e.hasOwnProperty("formula") ? (_.each(b, function(e) {
                        m.push(t({
                            path: e,
                            formulaName: r
                        }));
                    }), o(r)) : _.each(b, function(e) {
                        m.push(i({
                            path: e,
                            key: r
                        }));
                    });
                } else if (l && e.mtype && !e._private) {
                    var C = glu.extend(Object, e);
                    f.push(s({
                        key: r,
                        value: JSON.stringify(e)
                    })), c._childModels[r] = C, o(r);
                } else u.push(n({
                    key: r,
                    value: JSON.stringify(e)
                })), o(r);
            }
        }, this), c.initProps = new Function(u.join("\n")), c.initChildModelProps = new Function("config", f.join("\n")), 
        c.wireEverything = new Function(m.join("\n"));
        var g = [], p = [];
        for (_.each(c._formulas, function(e, t) {
            _.each(e.dependentOn, function(i) {
                if (!(i.indexOf(".") > -1)) {
                    var n = c._formulas[i];
                    n && (e.inbound.push(i), n.outbound.push(t));
                }
            }), 0 == e.inbound.length && g.push(t);
        }); g.length > 0; ) {
            var v = g.shift();
            p.push(v);
            var w = c._formulas[v];
            _.each(w.outbound, function(e) {
                var t = c._formulas[e];
                t.inbound.splice(t.inbound.indexOf(v), 1), 0 == t.inbound.length && g.push(e);
            });
        }
        c._formulasInOrder = p, h[a.name] = glu.extend(glu.ViewmodelLight, c);
    };
}(), glu.ViewmodelLight = glu.extend(Object, {
    constructor: function(e) {
        this._private = {}, e.parentVM && (this.parentVM = e.parentVM), this.rootVM = e.rootVM || (this.parentVM ? this.parentVM.rootVM : this), 
        new glu.GraphObservable({
            node: this
        }), this.initProps(), glu.deepApply(this, e), this.initChildModelProps(e), this.wireEverything(), 
        _.each(this._formulasInOrder, function(e) {
            this.recalculateFormula(e), this.hasOwnProperty(e) || (this[e] = null);
        }, this);
        for (var t = 0; t < this._mixinInitializers.length; t++) this._mixinInitializers[t].apply(this);
    },
    init: function() {
        return this._private && this._private.isInitialized ? (glu.log.warn("attempted to initialize an already initialized view model. Init() is a lifecycle function so please put any code you need to call multiple times elsewhere."), 
        void 0) : (this._private.isInitialized = !0, this.initCustom.apply(this, arguments), 
        this.initChildren(), this.initComplete(), void 0);
    },
    initProps: function() {},
    initChildModelProps: function() {},
    initChildren: function() {
        _.each(this._childModels, function(e, t) {
            var i = this[t];
            glu.isFunction(i.init) && (i._private.isInitialized || i.init());
        }, this);
    },
    initCustom: function() {},
    initComplete: function() {},
    recalculateFormula: function(e) {
        this.setRaw(e, this[e + "$"].apply(this), !0);
    },
    get: function(e) {
        var t = e.indexOf(".");
        if (-1 == t) return this[e];
        var i = this[e.substring(0, t)];
        if (i) {
            var n = e.substring(t + 1);
            return i.get ? i.get(n) : i[n];
        }
    },
    set: function(e, t) {
        if (_.isObject(e)) return _(e).each(function(e, t) {
            this.set(t, e);
        }, this), void 0;
        var i = e.indexOf(".");
        if (i > -1) {
            var n = e.substring(0, i), s = this[n];
            if (!s) throw new Error("Could find sub-model " + n);
            if (!s.set) throw new Error("Child is not a viewmodel: " + n);
            var r = e.substring(i + 1);
            return s.set(r, t), void 0;
        }
        var o = "set" + glu.symbol(e).toPascalCase(), a = this[o];
        if (void 0 === a) throw new Error("Cannot set: This view model (" + this.viewmodelName + ") has no property named " + e);
        a.call(this, t);
    },
    setRaw: function(e, t, i) {
        var n = this.get(e);
        n && n._ob && this._ob.detach(e), glu.equivalent(n, t) || (this[e] = t, this.fireEvent(e + "Changed", t, n, {
            modelPropName: e
        }), this.fireEvent("propertychanged", e, t, n), t && t._ob && this._ob.attach(e), 
        1 != i && this.fireEvent("changed", e, t, n));
    },
    on: function(e, t, i) {
        if (!_.isFunction(t)) throw new Error("Attempted to listen on event " + e + " without a function handler.");
        i = i || this, this._ob.on(e, t, i);
    },
    fireEvent: function() {
        this._ob.fireEvent.apply(this._ob, arguments);
    },
    loadData: function(e) {
        for (var t in e) this.set(t, e[t]);
    },
    model: function(e, t) {
        glu.isObject(e) && (t = e, e = null), null == t && (t = {}), t.mtype = t.mtype || e || "viewmodel", 
        t.ns = this.ns, t.parentVM = this, t.rootVM = this.rootVM;
        var i = glu.model(t);
        return this._private.isInitialized && i._private && i.init && !i._private.isInitialized && i.init(), 
        i;
    },
    toString: function() {
        var e = this.name || this.id || "?";
        return "[" + this.viewmodelName + " " + e + "]";
    }
}), glu.defView2 = function(e, t) {
    var i = t.xtype;
    if (glu.provider.adapters[i]) {
        var n = "svg-" + e.replace(/\./g, "-"), s = {
            _viewProps: {},
            _modelProps: {},
            _backToModel: []
        }, r = {}, o = glu._splitReference(e);
        if (t.parentLayout) {
            var a = glu.walk(o.ns).views[t.parentLayout + "Factory"];
            if (!a) throw new Error("Could not find parent layout named " + t.parentLayout);
            t = a(t), delete t.parentLayout;
        }
        var l = glu.provider.binder.getAdapter({
            xtype: i
        });
        _.each(t, function(e, t) {
            if ("items" == t || "states" == t || "listeners" == t) return r[t] = e, void 0;
            if (glu.isObject(e)) throw new Error('WHen pre-compiling views, we do not expect any child objects except for "listeners"');
            if (0 == e.indexOf("@?{") && (e = "@{" + e.substring(3)), 0 == e.indexOf("@{")) {
                var i = e.substring(2, e.length - 1), o = !1;
                0 == i.indexOf("!") && (o = !0, i = i.substring(1));
                var a = l[t + "Bindings"];
                if (a && a.setComponentProperty) throw new Error("Cannot compile " + n + "; compiled views do not support component property adapters yet!");
                var h = {
                    negate: o,
                    viewKey: t,
                    modelKey: i,
                    onModelUpdate: function(e) {
                        var i = this[t];
                    },
                    special: a,
                    viewSetterName: "set" + glu.symbol(t).toPascalCase()
                };
                s._viewProps[t] = h, s._modelProps[i] = h, a && a.eventConverter && s._backToModel.push(h);
            } else s[t] = e;
        }), r.xtype = n, glu.ns(o.ns).views[o.name] = r, s.constructor = function(e) {
            var t = e._bindings.defaultModel;
            _.each(this._viewProps, function(e, i) {
                var n = t[e.modelKey];
                glu.isObject(n) && (n = glu.deepApply({}, n)), n = e.negate ? !n : n, this[i] = n;
            }, this), this.callParent(arguments), t.on("propertychanged", this.modelPropChanged, this), 
            _.each(this._backToModel, function(e) {
                this.on(e.special.eventName, function() {
                    t.set(e.modelKey, e.special.eventConverter.apply(e.special, arguments));
                });
            }, this);
        }, s.modelPropChanged = function(e, t) {
            var i = this._modelProps[e];
            if (i) {
                var n = this[i.viewKey];
                if (n != t) {
                    this[i.viewKey] = t;
                    var s = this[i.viewSetterName];
                    s && s.call(this, t);
                }
            }
        }, s.extend = Ext.ClassManager.getNameByAlias("svgwidgets." + i), s.alias = "svgwidgets." + n, 
        Ext.define(e + "View", s), glu.regAdapter(n, {
            extend: i
        });
    }
}, glu.defView2 = glu.defView, $(function() {
    $("body").append($("#error-modal-template").html()), $("#error-modal").on("hidden.bs.modal", function(e) {
        window.location.reload();
    }), window.handleFatalError = function(e) {
        try {
            console.log("FATAL ", e);
            var t = null != e._t;
            window.catchErrors && !window.alreadyCaught && _rollbar.push(e), $("#error-modal").length > 0 && !window.ignoreAjaxError && $("#error-modal").modal("toggle", {
                backdrop: "static"
            });
        } catch (i) {
            console.log("Error occurred while handling another fatal error!", i);
        }
    }, window.onerror = function(e, t, i, n, s) {
        handleFatalError({
            _t: "uncaught",
            e: e,
            u: t,
            l: i,
            c: n,
            err: s
        });
    }, Error.stackTraceLimit = 50;
}), cn = window.cn || {}, cn.View = Backbone.View.extend({
    getTemplate: _.memoize(function(e) {
        var t = $("#" + e + "-template");
        if (0 == t.length) throw "Unabled to find template named " + e;
        return Handlebars.compile(t.html());
    }),
    wireCommands: function() {
        if (!this.commands) throw new Error("wireCommands() requires a .commands property bag.");
        this.events || (this.events = {}), _.each(this.commands, function(e, t) {
            if (!this.model[e]) throw new Error('There is no command on your view model named "' + e + '"');
            this.events[t] = function(t) {
                t.preventDefault(), t.stopPropagation(), this.model[e].call(this.model);
            };
        }, this);
    },
    wireChildViews: function(e, t, i, n) {
        var s = $(i), n = n || "id", r = this.childViews = {}, o = !1, a, l;
        if (_.isFunction(t)) l = t, a = function(e) {
            return e[n];
        }; else {
            o = !0;
            var h = glu.walk(t);
            if (!h) throw new Error("Unable to find namespace: ", t);
            a = function(e) {
                return e.viewmodelName + ":" + e[n];
            }, l = function(e) {
                var i = h[e.viewmodelName];
                if (!i) throw new Error("Unable to find view for ", t + "." + e.viewmodelName);
                return new i({
                    model: e
                });
            };
        }
        e.forEach(function(e) {
            var t = a(e), i = r[t] = l(e);
            s.append(i.$el), i.afterRender && i.afterRender.call(i), e.hide = function() {
                i.$el.hide();
            }, e.show = function() {
                i.$el.show();
            };
        }, this), e.on("added", function(e, t) {
            var i = a(e), n = r[i] = l(e);
            0 == t ? s.prepend(n.$el) : n.$el.insertAfter(s.children().eq(t - 1)), o && (n.afterRender && n.afterRender.call(n), 
            e.hide = function() {
                n.$el.hide();
            }, e.show = function() {
                n.$el.show();
            });
        }, this), e.on("removed", function(e, t) {
            var i = a(e), n = r[i];
            n && (delete r[i], n.remove());
        });
    },
    wireInputDialog: function(e) {
        function t(e) {
            var t = a().data("command"), n = {};
            i.find("input").each(function(e, t) {
                var i = $(t);
                n[i.attr("name")] = i.val();
            }), s[t].call(s, l().val(), n), i.modal("hide");
        }
        var i = $(e), n = this, s = this.model, r = ".okay-dialog", o = ":text,textarea", a = function() {
            return i.find(r);
        }, l = function() {
            return i.find(o);
        }, h = i.find(".modal-body");
        i.on("show.bs.modal", function(e) {
            l().val("");
            var t = h.data("template");
            t && (h.empty(), h.html(n.getTemplate(t)(s)));
            var r = a(), o = l();
            r.addClass("disabled"), r.toggleClass("disabled", 0 == o.val().length), i.find('.dropdown input[type="hidden"]').each(function(e, t) {
                var i = $(t).parent(), n = i.find(".dropdown-toggle"), s = i.find(".dropdown-menu"), r = i.find('input[type="hidden"]'), o = r.val(), a = s.find('[data-value="' + o + '"]').text();
                n.text(a), s.on("click", "a", function(e) {
                    var t = $(e.target), i = t.parent(), s = t.text(), o = t.data("value") || i.data("value");
                    n.text(s), r.val(o);
                });
            });
        }), i.on("shown.bs.modal", function(e) {
            l().focus().select();
        }), i.on("keyup", o, function() {
            a().toggleClass("disabled", 0 == l().val().length);
        }), i.on("keydown", o, function(e) {
            13 === e.which && t(e);
        }), i.on("click", r, t);
    },
    wireConfirmDialog: function(e) {
        function t(e) {
            var t = r().data("command"), s = {};
            i.find("input").each(function(e, t) {
                var i = $(t);
                s[i.attr("name")] = i.val();
            }), n[t].call(n, null), i.modal("hide");
        }
        var i = $(e), n = this.model, s = ".okay-dialog", r = function() {
            return i.find(s);
        };
        i.focus(), i.on("keydown", function(e) {
            13 === e.which && t(e);
        }), i.on("click", s, t);
    },
    wireModals: function() {
        var e = this.model, t = this;
        this.$el.find(".cn-input-dialog").each(function(e, i) {
            t.wireInputDialog(i);
        }), this.$el.find(".cn-input-confirm").each(function(e, i) {
            t.wireConfirmDialog(i);
        });
    },
    interceptClick: function(e) {
        e.stopPropagation(), this.model.fireEvent("autoclose");
    }
}), cn.Dialog = cn.View.extend({
    initialize: function() {
        this.listenTo(this.model.rootVM, "autoclose", this.remove), this.initComponent();
    },
    initComponent: function() {
        this.events = this.events || {}, glu.applyIf(this.events, {
            click: function(e) {
                console.log("click"), $(e.target).hasClass("dropdown-toggle") || (this.$el.find(".dropdown").removeClass("open"), 
                e.stopPropagation());
            },
            "click .close-dialog": "onNo",
            "click .okay-dialog": function() {
                this.onYes() !== !1 && this.closeAndRemove();
            }
        }), this.render();
    },
    open: function() {
        $("body").append(this.el), this.$el.children().show(), this.center(), this.onAfterOpen(), 
        console.log("Opened confirmation dialog");
    },
    center: function() {
        this.$el.children().position({
            my: "center",
            at: "center",
            of: "body"
        });
    },
    onYes: function() {},
    onNo: function() {
        this.remove();
    },
    onAfterOpen: function() {},
    render: function() {
        var e = this.getTemplate(this.templateName);
        this.$el.html(e(this.model));
    }
}), cn.ConfirmDialog = cn.Dialog, cn.Dialog.prototype.show = cn.Dialog.prototype.open, 
cn.InputDialog = cn.Dialog.extend({
    initComponent: function() {
        this.events = this.events || {}, glu.applyIf(this.events, {
            click: function(e) {
                $(e.target).hasClass("dropdown-toggle") || (this.$el.find(".dropdown").removeClass("open"), 
                e.stopPropagation());
            },
            "click .close-dialog": "closeAndRemove",
            "click .okay-dialog": "onYes",
            "keydown input": function(e) {
                27 == e.which && this.remove(), 13 === e.which && this.onYes();
            }
        }), this.render();
    },
    onAfterOpen: function() {
        this.$el.find("[type=text]").focus();
    },
    closeAndRemove: function() {
        this.$el.find(".modal").on("hidden.bs.modal", function(e) {
            this.remove();
        }), this.$el.find(".modal").modal("hide");
    }
}), cn.ContextMenu = cn.View.extend({
    show: function(e) {
        this.$el.css("right", "auto"), this.$el.show();
        var t = this;
        this.$el.position({
            my: "left top",
            of: e,
            collision: "flipfit",
            using: function(i, n) {
                i.top < e.pageY - 2 && (i.top -= 39), t.$el.css("top", i.top).css("left", i.left);
            }
        }), this.$el.show();
    }
}), cn.keyframe.LoginView = cn.View.extend({
    el: "body",
    initialize: function() {
        this.stickit();
    },
    events: {
        "click .cmd-signin": function(e) {
            return $("#validation-login").valid() ? (this.model.signIn(), void 0) : !1;
        },
        "keydown #password": function(e) {
            return 13 === e.which ? $("#validation-login").valid() ? (this.model.signIn(), void 0) : !1 : void 0;
        }
    },
    bindings: {}
}), cn.keyframe.InviteView = cn.View.extend({
    el: "body",
    initialize: function() {
        this.stickit();
    },
    events: {
        "click .cmd-invite-accept": function(e) {
            return $("#validation-invite").valid() ? (this.model.inviteAccept(), void 0) : !1;
        },
        "keydown #password1": function(e) {
            return 13 === e.which ? $("#validation-invite").valid() ? (this.model.inviteAccept(), 
            void 0) : !1 : void 0;
        }
    },
    bindings: {}
}), cn.keyframe.ForgotView = cn.View.extend({
    el: "body",
    initialize: function() {},
    events: {
        "click .cmd-send": function(e) {
            return $("#validation-forgot").valid() ? (this.model.sendPasswordReset(), void 0) : !1;
        },
        "keydown #usernameemail": function(e) {
            return 13 === e.which ? $("#validation-forgot").valid() ? (this.model.sendPasswordReset(), 
            !1) : !1 : void 0;
        }
    },
    bindings: {}
}), cn.keyframe.ResetView = cn.View.extend({
    el: "body",
    initialize: function() {},
    events: {
        "click .cmd-reset": function(e) {
            return $("#validation-reset").valid() ? (this.model.resetPassword(), void 0) : !1;
        },
        "keydown #password2": function(e) {
            return 13 === e.which ? $("#validation-reset").valid() ? (this.model.resetPassword(), 
            !1) : !1 : void 0;
        }
    },
    bindings: {}
}), cn.keyframe.SignupView = cn.View.extend({
    el: "body",
    initialize: function() {
        this.stickit();
    },
    events: {
        "click .cmd-signin": function(e) {
            return $("#validation-signup").valid() ? (this.model.signUp(), void 0) : !1;
        },
        "keydown #password": function(e) {
            return 13 === e.which ? $("#validation-signup").valid() ? (this.model.signUp(), 
            void 0) : !1 : void 0;
        }
    },
    bindings: {}
}), glu.defModel("cn.keyframe.login", {
    mixins: [ "backbonish" ],
    init: function(e) {},
    signIn: function() {
        var e = $("#usernameemail").val(), t = $("#password").val();
        $.ajax({
            url: "/signin",
            type: "POST",
            data: {
                user: e,
                pass: t
            }
        }).done(function(e) {
            var t = $("#referrer").val();
            t ? e.status && (window.location.href = t) : e.status && (window.location.href = "/projects");
        }).fail(function(e, t, i) {
            $(".cn-loginfail").removeClass("hidden");
        });
    }
}), glu.defModel("cn.keyframe.invite", {
    mixins: [ "backbonish" ],
    init: function(e) {
        this.invite = e;
    },
    inviteAccept: function() {
        var e = this, t = $("#password1").val(), i = e.invite.inviteToken;
        $.ajax({
            url: "/invite/accept",
            type: "POST",
            data: {
                pass: t,
                inviteToken: i
            }
        }).done(function(t) {
            var i = $("#referrer").val();
            window.location.href = i ? i : "/projects/" + e.invite.projectId + "?NewUser";
        }).fail(function(e, t, i) {
            $(".cn-invitefail").removeClass("hidden");
        });
    }
}), glu.defModel("cn.keyframe.forgot", {
    mixins: [ "backbonish" ],
    init: function(e) {},
    sendPasswordReset: function() {
        var e = $("#usernameemail").val();
        $.ajax({
            url: "/forgotpassword",
            type: "POST",
            data: {
                useroremail: e
            }
        }).done(function(e) {
            $(".cn-forgot-fail").addClass("hidden"), $(".cn-forgot-success").removeClass("hidden");
        }).fail(function(e, t, i) {
            $(".cn-forgot-success").addClass("hidden"), $(".cn-forgot-fail").removeClass("hidden");
        });
    }
}), glu.defModel("cn.keyframe.reset", {
    mixins: [ "backbonish" ],
    init: function(e) {},
    resetPassword: function() {
        var e = $("#password2").val();
        $.ajax({
            url: window.location.href,
            type: "POST",
            data: {
                password: e
            }
        }).done(function(e) {
            $(".cn-reset-fail").addClass("hidden"), $(".cn-reset-success").removeClass("hidden");
        }).fail(function(e, t, i) {
            $(".cn-reset-success").addClass("hidden"), $(".cn-reset-fail").removeClass("hidden");
        });
    }
}), glu.defModel("cn.keyframe.signup", {
    mixins: [ "backbonish" ],
    init: function(e) {},
    signUp: function() {
        var e = $("#name").val(), t = $("#email").val(), i = $("#password").val();
        $.ajax({
            url: "/signup",
            type: "POST",
            data: {
                name: e,
                email: t,
                pass: i
            }
        }).done(function(e) {
            var t = $("#referrer").val();
            t ? e.status && (window.location.href = t) : e.status && (window.location.href = "/projects?NewUser");
        }).error(function(e) {
            try {
                var t = JSON.parse(e.responseText);
                toastr.error(t.message, "Error"), window.ignoreAjaxError = !0;
            } catch (i) {
                toastr.error("Oops something went wrong. Try again. ", "Error");
            }
        });
    }
}), glu.mreg("listfilter", {
    filter: function(e) {
        var t = this.toArray(), i = _.filter(t, e.filter);
        this.forEach(function(e) {
            e.hide();
        }), _.each(i, function(e) {
            this.getById(e[this.idProperty]).show();
        }, this);
    }
}), glu.mreg("sorted", {
    insertIgnoreSorter: function(e, t, i) {
        glu.List.prototype.insert.call(this, e, t, i);
    },
    sortedIndex: function(e) {
        var t = this.toArray().concat();
        if (this.sortRanker) return _(t).sortedIndex(e, this.sortRanker, this);
        t.push(e);
        var i = t.sort(this.sortComparator);
        return _(i).indexOf(e);
    },
    internalSort: function() {
        var e = this.toArray().concat();
        return this.sortRanker ? _(e).sortBy(this.sortRanker, this) : e.sort(this.sortComparator);
    },
    insert: function(e, t, i) {
        if (!this.sortRanker && !this.sortComparator) throw new Error("A list with the sorted mixin needs a sorter function.");
        var n = this.sortedIndex(t);
        return this.insertIgnoreSorter(n, t, i), n;
    },
    resort: function(e) {
        e = e || {};
        var t = this.internalSort();
        if (!this.loadData) throw new Error("Resorting requries the listupdater plugin");
        e.ignoreSorter = !0, this.loadData(t, e);
    },
    transferFrom: function(e, t, i) {
        null == i && (i = this.length), e.remove(t, !0);
        var n = this.insert(i, t, !0);
        this.fireEvent("transferred", e, t, n);
    },
    transferFromIgnoreSorter: function(e, t, i) {
        null == i && (i = this.length), e.remove(t, !0), this.insertIgnoreSorter(i, t, !0), 
        this.fireEvent("transferred", e, t, i);
    }
}), glu.mreg("listupdater", {
    loadData: function(e, t) {
        function i(e, i) {
            t.ignoreSorter ? r.transferFromIgnoreSorter(r, e, i) : r.transferFrom(r, e, i);
        }
        function n(e, i) {
            t.ignoreSorter ? r.insertIgnoreSorter(i, e) : r.insert(i, e);
        }
        var s = 1e3, t = t || {}, r = this, o = 0, a = e.map(function(e) {
            return e[r.idProperty];
        }), l = _.object(a, e), h = this.keyMap, d = this.toArray().map(function(e) {
            return e[r.idProperty];
        }), r = this;
        d.forEach(function(e) {
            l[e] || (r.removeAtKey(e), o++);
        }), a.forEach(function(e, t) {
            h[e] || (r.insert(t, l[e]), o++);
        });
        for (var c = 0, u = 0, r = this; c < a.length; ) {
            if (u++ > s) throw new Error("Stuck in a loop while loading data into a list.");
            var d = this.toArray().map(function(e) {
                return e[r.idProperty];
            }), f = this.getAt(c), m = this.getById(a[c]);
            if (f[r.idProperty] != a[c]) {
                var g = a.indexOf(f[r.idProperty]), p = d.indexOf(a[c]);
                g > p ? t.transfer ? (i(f, g), o++) : (this.removeAt(c), o++, n(f, g), o++) : t.transfer ? (i(m, c), 
                o++) : (this.removeAt(p), o++, n(m, c), o++, c++);
            } else c++;
        }
        return o;
    }
}), $(function() {
    $.mask.definitions["~"] = "[+-]", $("#phone").mask("(999) 999-9999"), jQuery.validator.addMethod("phone", function(e, t) {
        return this.optional(t) || /^\(\d{3}\) \d{3}\-\d{4}( x\d{1,6})?$/.test(e);
    }, "Enter a valid phone number."), jQuery.validator.addMethod("passwordCreate", function(e, t) {
        return this.optional(t) || /^[a-zA-Z][\w!#$%&? "]{5,14}$/.test(e);
    }, "Password length must be between 6 to 15 characters and start with a letter. May contain letters, numbers, and special characters !#$%&?"), 
    "reset" == _entryPointName.toLowerCase() && $("#validation-reset").validate({
        errorElement: "div",
        errorClass: "help-block",
        focusInvalid: !1,
        submit: !1,
        rules: {
            password: {
                required: !0,
                passwordCreate: "passwordCreate"
            },
            password2: {
                equalTo: "#password"
            }
        },
        messages: {
            invalidHandler: function(e, t) {},
            highlight: function(e) {
                $(e).closest(".form-group").removeClass("has-info").addClass("has-error");
            },
            success: function(e) {
                $(e).closest(".form-group").removeClass("has-error").addClass("has-info"), $(e).remove();
            },
            errorPlacement: function(e, t) {
                e.insertAfter(t.parent());
            },
            submitHandler: function(e) {},
            invalidHandler: function(e) {}
        }
    }), "forgot" == _entryPointName.toLowerCase() && $("#validation-forgot").validate({
        errorElement: "div",
        errorClass: "help-block",
        focusInvalid: !1,
        submit: !1,
        rules: {
            usernameemail: {
                required: !0,
                minlength: 4
            }
        },
        messages: {
            usernameemail: {
                required: "Please specify a username or e-mail.",
                minlength: "Please specify a username or e-mail."
            },
            invalidHandler: function(e, t) {},
            highlight: function(e) {
                $(e).closest(".form-group").removeClass("has-info").addClass("has-error");
            },
            success: function(e) {
                $(e).closest(".form-group").removeClass("has-error").addClass("has-info"), $(e).remove();
            },
            errorPlacement: function(e, t) {
                e.insertAfter(t.parent());
            },
            submitHandler: function(e) {},
            invalidHandler: function(e) {}
        }
    }), "login" == _entryPointName.toLowerCase() && $("#validation-login").validate({
        errorElement: "div",
        errorClass: "help-block",
        focusInvalid: !1,
        submit: !1,
        rules: {
            usernameemail: {
                required: !0,
                minlength: 1
            },
            password: {
                minlength: 6,
                required: !0
            }
        },
        messages: {
            password: {
                required: "Please specify a password."
            },
            usernameemail: {
                required: "Please specify a username or e-mail."
            },
            invalidHandler: function(e, t) {
                $(".alert-danger", $(".login-form")).show();
            },
            highlight: function(e) {
                $(e).closest(".form-group").removeClass("has-info").addClass("has-error");
            },
            success: function(e) {
                $(e).closest(".form-group").removeClass("has-error").addClass("has-info"), $(e).remove();
            },
            errorPlacement: function(e, t) {
                e.insertAfter(t.parent());
            },
            submitHandler: function(e) {},
            invalidHandler: function(e) {}
        }
    }), "signup" == _entryPointName.toLowerCase() && $("#validation-signup").validate({
        errorElement: "div",
        errorClass: "help-block",
        focusInvalid: !1,
        submit: !1,
        rules: {
            name: {
                required: !0
            },
            password: {
                passwordCreate: "passwordCreate",
                required: !0
            },
            email: {
                required: !0,
                email: !0
            }
        },
        messages: {
            password1: {
                required: "Please specify a password."
            },
            name: "Please enter your full name",
            invalidHandler: function(e, t) {},
            highlight: function(e) {
                $(e).closest(".form-group").removeClass("has-info").addClass("has-error");
            },
            success: function(e) {
                $(e).closest(".form-group").removeClass("has-error").addClass("has-info"), $(e).remove();
            },
            errorPlacement: function(e, t) {
                e.insertAfter(t.parent());
            },
            submitHandler: function(e) {},
            invalidHandler: function(e) {}
        }
    }), "invite" == _entryPointName.toLowerCase() && $("#validation-invite").validate({
        errorElement: "div",
        errorClass: "help-block",
        focusInvalid: !1,
        submit: !1,
        rules: {
            password: {
                passwordCreate: "passwordCreate",
                required: !0
            },
            password1: {
                equalTo: "#password"
            }
        },
        messages: {
            password1: {
                required: "Please specify a password."
            },
            invalidHandler: function(e, t) {},
            highlight: function(e) {
                $(e).closest(".form-group").removeClass("has-info").addClass("has-error");
            },
            success: function(e) {
                $(e).closest(".form-group").removeClass("has-error").addClass("has-info"), $(e).remove();
            },
            errorPlacement: function(e, t) {
                e.insertAfter(t.parent());
            },
            submitHandler: function(e) {},
            invalidHandler: function(e) {}
        }
    });
    var e = glu.model("cn.keyframe." + _entryPointName.toLowerCase());
    window.initialModelData ? e.init(e.init(window.initialModelData)) : e.init(), new (cn.keyframe[glu.symbol(_entryPointName).toPascalCase() + "View"])({
        model: e
    });
});
//# sourceMappingURL=/public/app-includes-am.min.js.map
